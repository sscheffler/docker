input { 
	stdin{ 
		add_field 	=> { "@class" => "Address2" }
		add_field	=> { "@version" => 1 }
	}
	file
	{
		path => "/data/input/*.log" 
		codec => multiline 
		{
      			pattern => "^((\s|ID:|Address:|Encoding:|Http-Method:|Headers:|Payload:|Content-Type:|Response-Code:).*$)|^-{27,28}$|.*(Inbound|Outbound)\sMessage$"
      			what => "next"
    		}
		add_field       => { "@class" => "LogEvent" }
                add_field       => { "@version" => 1 } 
	}
}

filter {
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "%{SESSION_ID:s_id}" ]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "ID:\s%{CXF_ID:cxf_id}"]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "Headers: %{HEADERS:headers}"]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "%{MESSAGE_TYPE:type}\sMessage"]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "Payload:\s%{PAYLOAD:payload}"]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "Http-Method:\s%{HTTP_METHOD:http}"]
  	}
  grok {
	patterns_dir => "/data/config/patterns"
	match => [ "message", "^%{TIME:time}"]
  	}
  grok	{
	patterns_dir => "/data/config/patterns"
	match => ["path", ".*%{SERVICE_TYPE:serviceType}-service-request-%{CLUSTER_NODE:clusterNode}.*"]
	}
  mutate{
	remove_field => [ "message" ]
	}
}	

output { 
# stdout{codec		=> "json" }

#send to elastic search
 elasticsearch {
	host 		=> "el"
	port 		=> "9300"
 }

 http{
	http_method 	=> "post"
	url 		=> "http://orient:2480/document/log/"
	headers		=> { "Authorization" => "Basic YWRtaW46YWRtaW4=" }
 } 

}


